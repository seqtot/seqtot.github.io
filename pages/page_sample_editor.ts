import { byId } from '../src/utils';
import { Muse as m, Synthesizer, TKeyInfo, Sound, TWavePreset } from '../libs/muse';
import { Anchors } from '../sample-editor/a-wave-form-component';

// SAMPLE EDITOR
import { SampleEditorWc } from '../sample-editor/a-sample-editor-wc';
import { EventEmitter } from '../libs/common/event-emitter';
import rawVoiceInst from '../waf-fonts/voice_han';
import { RouteInfo } from '../src/router';

type WithId = {id: string}

if (customElements.get(SampleEditorWc.tag) == null) {
    customElements.define(SampleEditorWc.tag, SampleEditorWc);
}

let useFont = true;
let fontSource = rawVoiceInst as TWavePreset;
let voiceInstr: {[key: string]: TWavePreset};

function cloneWavePreset(preset: any): TWavePreset {
    preset = {...preset};
    preset.zones = preset.zones.map(item => ({...item}));
    return preset;
}

const anchorsGroup = {
    startOffset: 'startOffset',
    head: 'head',
    loopStart: 'loopStart',
    loopEnd: 'loopEnd',
    tail: 'tail',
    free: 'free',
}

const ids = {
    test: 'test',
    repaint: 'repaint',
    editor: 'editor',
    load: 'load',
    save: 'save',
    data: 'data',
    text: 'text',
    info: 'info',
    buildFont: 'buildFont',
    zoneKeys: 'zoneKeys',

    loopStartGroup:'loopStart',
    loopStartLabel:'loopStartLabel',
    loopStartSec:'loopStartSec',

    loopEndGroup:'loopEnd',
    loopEndLabel:'loopEndLabel',
    loopEndSec:'loopEndSec',

    tailGroup:'tail',
    tailLabel:'tailLabel',
    tailSec:'tailSec',

    headGroup:'head',
    headLabel:'headLabel',
    headSec:'headSec',

    startOffsetGroup:'startOffset',
    startOffsetLabel:'startOffsetLabel',
    startOffsetSec:'startOffsetSec',

    tempMinGroup: 'tempMin',
    tempMinLabel: 'tempMinLabel',
    tempMinSec: 'tempMinSec',

    tempMaxGroup: 'tempMax',
    tempMaxLabel: 'tempMaxLabel',
    tempMaxSec: 'tempMaxSec',

    tempClickedGroup: 'tempClicked',
    tempClickedLabel: 'tempClickedLabel',
    tempClickedSec: 'tempClickedSec',

    clearAnchor: 'clearAnchor',
    clearAllAnchors: 'clearAllAnchors',
}

function skipEvent(evt: KeyboardEvent, result?: boolean): boolean {
    evt.preventDefault();
    evt.stopPropagation();

    return !!result;
}

const safeKeys = {
    ArrowUp: 'ArrowUp',
    ArrowLeft: 'ArrowLeft',
    ArrowRight: 'ArrowRight',
    ArrowDown: 'ArrowDown',
    End: 'End',
    Home: 'Home',
    PageUp: 'PageUp',
    PageDown: 'PageDown',
    Insert: 'Insert',
    // 'Esc', ??
};

export function isSafeKeyCode(code: string): boolean {
    return !!safeKeys[code];
}

type Nil = null | undefined;
type InputMode = Nil | 'text' | 'beat' | 'sound' | 'voice' | 'linePlayer';

const DOWN = 1;
const UP = 2;

const blobData = 'data:audio/wav;base64,';
// blob = 'data:audio/wav;base64,' + audioFile

// https://stackoverflow.com/questions/25547475/save-to-local-file-from-blob
export class SamplePage {
    inputMode: InputMode = null;
    downedKeys: { [key: string]: any } = {};
    synthesizer = new Synthesizer();
    font: TWavePreset;
    fontSource: TWavePreset = cloneWavePreset(fontSource);
    anchors: Anchors;
    anchorGroup: string;
    currZone = 0;

    get pageId(): string {
        return this.props.data.id;
    }

    get pageEl(): HTMLElement {
        return document.getElementById('app-route');
    }

    get ee(): EventEmitter {
        return this.byId(ids.editor)['ee'];
    }

    constructor(
        public props: RouteInfo<WithId>,
    ) {
        this.mouseDownListener = (event: MouseEvent) => {
            //console.log('MousePressed', this.context);
            // this.ee.emit('setInFocus', this.pageEl.contains(event.target as HTMLElement));
        }

        this.synthesizer.connect({ ctx: Sound.ctx });
        this.synthesizer.setSettings(m.defaultSynthSettings);

        voiceInstr = {};
        // Object.keys(rawVoiceInst).map(key => {
        //     const instr = {...rawVoiceInst[key]};
        //     this.synthesizer.fontPlayer.adjustPreset(this.synthesizer.ctx, instr);
        //     voiceInstr[key] = instr;
        // });
    }

    mouseDownListener: EventListener;

    async onMounted() {
        this.setContent();
        this.subscribeElements();
        this.subscribeKeys();

        await this.buildFont(this.currZone);

        this.ee.emit(ids.repaint);
    }

    onUnmounted() {
        //window.removeEventListener('mousedown', this.mouseDownListener);
        //console.log('on unmount');
    }

    onBeforeUnmount() {
        //console.log('onBeforeUnmount');
    }

    setContent() {
        this.pageEl.innerHTML = `
            <div style="margin: 0 .5rem;">
                <div>
                    <a id="${this.getId(ids.save)}">${ids.save}</a>&emsp;
                    <a id="${this.getId(ids.repaint)}">${ids.repaint}</a>&emsp;
                    <a id="${this.getId(ids.test)}">${ids.test}</a>&emsp;
                    <input type="file" id="${this.getId(ids.load)}" multiple />
                    <div id="${this.getId(ids.zoneKeys)}" style="display: inline-block;">
                        zoneKeys
                    </div>                
                </div>
                <textarea
                  rows="3"
                  style="width: 100%; border: 1px solid black;"
                  id="${this.getId(ids.text)}"
                ></textarea>
                <span id="${this.getId(ids.info)}"></span>                
                <div>
                    <a id="${this.getId(ids.startOffsetLabel)}">${ids.startOffsetGroup}</a>&emsp;
                    <a id="${this.getId(ids.headLabel)}">${ids.headGroup}</a>&emsp;                    
                    <a id="${this.getId(ids.loopStartLabel)}">${ids.loopStartGroup}</a>&emsp;                
                    <a id="${this.getId(ids.loopEndLabel)}">${ids.loopEndGroup}</a>&emsp;
                    <a id="${this.getId(ids.tailLabel)}">${ids.tailGroup}</a>&emsp;                                        
                    <a id="${this.getId(ids.buildFont)}">${ids.buildFont}</a>&emsp;
                </div>
                <div>
                    <a id="${this.getId(ids.tempMinLabel)}">min</a>&emsp;
                    <span id="${this.getId(ids.tempMinSec)}">?</span>&emsp;                    
                    <a id="${this.getId(ids.tempClickedLabel)}">clicked</a>&emsp;
                    <span id="${this.getId(ids.tempClickedSec)}">?</span>&emsp;                                        
                    <a id="${this.getId(ids.tempMaxLabel)}">max</a>&emsp;
                    <span id="${this.getId(ids.tempMaxSec)}">?</span>&emsp;
                    <a id="${this.getId(ids.clearAnchor)}">clear</a>&emsp;                                                        
                    <a id="${this.getId(ids.clearAllAnchors)}">clearAll</a>&emsp;                    
                </div>                                
            </div>
            <div style="height: 80%;">
                <sample-editor id="${this.getId(ids.editor)}"></sample-editor>        
            </div>
        `.trim();
    }

    setAnchorGroup(anchorGroup: string) {
        Object.values(anchorsGroup).forEach(name => {
            const el = this.byId(`${name}Label`);
            if (el) {
                el.style.fontWeight = '400';
            }
        });

        this.anchorGroup = anchorGroup;
        const el = this.byId(`${anchorGroup}Label`);

        if (el) {
            el.style.fontWeight = '700';
        }
    }

    emitFixAnchor(anchor: string) {
        if (!this.anchorGroup) {
            return;
        }

        this.ee.emit('fixAnchor', {
            from: anchor,
            to: this.anchorGroup,
        });
    }

    subscribeElements() {
        // ELEMENTS
        this.byId(ids.test)?.addEventListener('click', (evt: MouseEvent) => this.test());
        this.byId(ids.repaint)?.addEventListener('click', (evt: MouseEvent) => this.ee.emit('repaint'));
        this.byId(ids.load)?.addEventListener('change', (evt: Event) => this.loadFile(evt));
        // anchors
        this.byId(ids.startOffsetLabel)?.addEventListener('click', (evt: Event) => this.setAnchorGroup(ids.startOffsetGroup));
        this.byId(ids.headLabel)?.addEventListener('click', (evt: Event) => this.setAnchorGroup(ids.headGroup));
        this.byId(ids.loopStartLabel)?.addEventListener('click', (evt: Event) => this.setAnchorGroup(ids.loopStartGroup));
        this.byId(ids.loopEndLabel)?.addEventListener('click', (evt: Event) => this.setAnchorGroup(ids.loopEndGroup));
        this.byId(ids.tailLabel)?.addEventListener('click', (evt: Event) => this.setAnchorGroup(ids.tailGroup));

        this.byId(ids.tempMaxLabel)?.addEventListener('click', (evt: Event) => this.emitFixAnchor(ids.tempMaxGroup));
        this.byId(ids.tempMinLabel)?.addEventListener('click', (evt: Event) => this.emitFixAnchor(ids.tempMinGroup));
        this.byId(ids.tempClickedLabel)?.addEventListener('click', (evt: Event) => this.emitFixAnchor(ids.tempClickedGroup));

        this.byId(ids.buildFont)?.addEventListener('click', (evt: Event) => this.buildFont(this.currZone));
        this.byId(ids.clearAllAnchors)?.addEventListener('click', (evt: Event) => this.ee.emit(ids.clearAllAnchors));

        // EVENTS
        this.ee.on('changeAnchorsInfo', null, (val: Anchors) => this.setAnchors(val));
    }

    setAnchors(val: Anchors) {
        this.anchors = val;
        this.byId(ids.tempClickedSec).innerHTML = <any>val.tempClickedSec;
        this.byId(ids.tempMaxSec).innerHTML = <any>val?.tempMaxSec;
        this.byId(ids.tempMinSec).innerHTML = <any>val?.tempMinSec;

        this.buildFont(this.currZone);
        this.ee.emit(ids.repaint);
    }

    addZoneKeys(font: TWavePreset, iZone: number) {
        let arr: string[] = [];

        font.zones.forEach((item, i) => {
            let key = `${item.keyRangeLow}-${item.keyRangeHigh}`;

            arr.push(`<span id="${this.getId('iZone-' + i)}">${key}</span>&nbsp;`);
        });

        this.byId(ids.zoneKeys).innerHTML = arr.join('');

        arr.forEach((val, i) => {
            const el = this.byId(`iZone-${i}`);
            if (el) {
                el.style.fontWeight = '400';
            }
            el.addEventListener('click', () => {
                this.setActiveZone(i);
            });
        });

        const el = this.byId(`iZone-${iZone}`);

        if (el) {
            el.style.fontWeight = '700';
        }
    }

    async setActiveZone(iZone: number) {
        //this.ee.emit(ids.clearAllAnchors);
        await this.buildFont(iZone, false);

        this.ee.emit(ids.repaint);
    }

    async buildFont(iZone: number, useAnchors = true) {
        let font = cloneWavePreset(this.fontSource);

        this.currZone = iZone;
        this.addZoneKeys(font, iZone);

        //console.log('buildFont.anchors', this.anchors);

        if (this.anchors && useAnchors) {
            const startOffsetSec = this.anchors.startOffsetSec || 0;
            const loopStartSec = this.anchors.loopStartSec || 0;
            const loopEndSec = this.anchors.loopEndSec || 0;
            const loopStartInd = this.anchors.loopStartInd || 0;
            const loopEndInd = this.anchors.loopEndInd || 0;

            font.zones[iZone].loopStartSec = loopStartSec;
            font.zones[iZone].loopEndSec = loopEndSec;
            font.zones[iZone].startOffsetSec = startOffsetSec;
            (this.byId(ids.text) as HTMLTextAreaElement).value = `,startOffsetSec:${startOffsetSec}\n,loopStartSec:${loopStartSec}\n,loopEndSec:${loopEndSec}`;
            (this.byId(ids.text) as HTMLTextAreaElement).value = [
                `,startOffsetSec:${startOffsetSec}`,
                `,loopStartSec:${loopStartSec}`,
                `,loopEndSec:${loopEndSec}`,
                `,loopStart:${loopStartInd}`,
                `,loopEnd:${loopEndInd}`,
            ].join(`\n`);
        }

        //await this.synthesizer.fontPlayer.adjustPreset(this.synthesizer.ctx, font); // jjkl
        const audioBuffer = await m.utils.getAudioBufferFromString(font.zones[iZone].file);
        await m.font.preparePreset({audioContext: this.synthesizer.ctx, preset: font}); // jjkl
        //const audioBuffer = font.zones[iZone].buffer;
        //this.font = font;
        this.font = await m.font.preparePreset({audioContext: this.synthesizer.ctx, preset: font}); // jjkl
        this.byId(ids.info).innerHTML = `duration: ${audioBuffer.duration} length: ${audioBuffer.length} fontSampleRate:  ${font.zones[0].sampleRate} `;
        this.ee.emit(ids.data, { audioBuffer: audioBuffer });
    }

    async test() {
        let audioBuffer: AudioBuffer;
        m.utils.getAudioBufferFromBlobString(blobData).then(result => {
            audioBuffer = result;
            //console.log('audioBuffer', audioBuffer);
            this.ee.emit(ids.data, {
                audioBuffer
            });

            this.ee.emit(ids.repaint);
        });

        //this.ee.emit('test');
    }

    byId(id: string): HTMLElement {
        return byId(this.getId(id));
    }

    getId(id: string): string {
        return this.pageId + '-' + id;
    }

    // https://web.dev/read-files/#read-content
    loadFile(event: Event){
        const fileList = event.target['files'];

        const loadWav = async (file: File) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);

            reader.addEventListener('load', async (event) => {
                //console.log('ON LOAD WAV', event);

                const result = event.target.result as string;
                let audioBuffer = await m.utils.getAudioBufferFromBlobString(result);
                this.ee.emit(ids.data, { audioBuffer });
                this.ee.emit(ids.repaint);

            });
        }

        const loadText = async (file: File) => {
            const reader = new FileReader();
            // reader.readAsDataURL(file);
            reader.readAsText(file);

            reader.addEventListener('load', async (event) => {
                //console.log('ON LOAD TEXT 1', event);

                const result = event.target.result as string;

                //console.log('ON LOAD TEXT 2', result);
            });
        }

        const loadJS = async (file: File) => {
            const reader = new FileReader();
            // reader.readAsDataURL(file);
            reader.readAsText(file);

            reader.addEventListener('load', async (event) => {
                const result = event.target.result as string;
                const arr = result.split('\n');
                let evalResult: any;

                for (let i = 0; i < arr.length; i++) {
                    let str = arr[i].trim();
                    if (str.startsWith('console')) str = '';
                    if (str.startsWith('var ')) str = 'evalResult = {';
                    if (str.startsWith('};')) str = '}';
                    arr[i] = str;
                }
                //console.log('ON LOAD JS 1', arr.filter(item => !!item).join('\n'));
                //console.log('ON LOAD JS 1', JSON.parse(arr.filter(item => !!item).join('\n')));
                eval(arr.filter(item => !!item).join('\n'));

                this.fontSource = cloneWavePreset(evalResult);

                await this.buildFont(0, false);

                this.ee.emit(ids.repaint);
            });
        }

        //console.log('FILE', fileList[0]);
        // text/plain
        //text/javascript
        // application/json

        if (fileList[0] && fileList[0].type === 'audio/wav') {
            loadWav(fileList[0]);
        }

        if (fileList[0] && fileList[0].type === 'text/plain') {
            loadText(fileList[0]);
        }

        if (fileList[0] && fileList[0].type === 'text/javascript') {
            loadJS(fileList[0]);
        }
    }

    subscribeKeys() {
        this.byId(ids.text).addEventListener('keydown', (e: KeyboardEvent) => {
            this.handleKeyEvent(e, DOWN);
        });

        this.byId(ids.text).addEventListener('keyup', (e: KeyboardEvent) => {
            this.handleKeyEvent(e, UP);
        });
    }

    handleSoundKeyEvent(evt: KeyboardEvent, type: number) {
        if (safeKeys[evt.code]) return;
        if (evt.ctrlKey || evt.altKey) return;

        // if (evt.code === 'Delete') {
        //     if (type === 'up') {
        //         this.outEditor.setValue('');
        //     }
        //
        //     return skipEvent(evt);
        // }

        skipEvent(evt);

        if (evt.repeat) return;

        let soundInfo = this.synthesizer.keysAndNotes[evt.code] || <TKeyInfo>{};
        let instrObj = useFont ? this.font : voiceInstr[soundInfo.noteLat] || null;
        let keyOrNote = evt.code;

        if (soundInfo.noteLat && type === DOWN) {
            if (this.downedKeys[keyOrNote]) {
                return;
            } else {
                this.downedKeys[keyOrNote] = true;
            }

            //const info = {}

            this.synthesizer.playSound({keyOrNote, instrObj, volume: .5, onlyStop: false }); // jjkl

            return;
        }

        if (soundInfo.noteLat && type === UP) {
            this.downedKeys[keyOrNote] = false;
            this.synthesizer.playSound({keyOrNote, instrObj, onlyStop: true}); // jjkl

            return;
        }

        // // if (evt.code === 'Space' && type === 'up') {
        // //   this.cmEditor.setCursor(this.cmEditor.getCursor().line + 1, 0);
        // //   //console.log(this.cmEditor.getCursor());
        // // }
    }

    // let soundInfo = this.keysAndNotes[keyOrNote];
    // let note = this.getNoteSame(keyOrNote); val = (val || '').toLocaleLowerCase().trim();
    // const noteLat = this.getNoteLat(note);

    handleKeyEvent(evt: KeyboardEvent, type: number) {
        //console.log('handeEvent', type, evt);
        const inputMode = this.inputMode;

        if (this.isCommand(evt, type)) return;

        if (this.inputMode === 'sound') return this.handleSoundKeyEvent(evt, type);
        if (this.inputMode === 'text') return;
        // if (inputMode === 'beat') return this.handleBeatKeyEvent(evt, type);
        // if (inputMode === 'linePlayer') return this.handleLinePlayerKeyEvent(evt, type);
        // // if (inputMode === 'voice') return handleVoiceKeyEvent(evt, type);
        // if (!this.inputMode) return this.handleNoModeKeyEvent(evt, type);
    }

    isCommand(evt: KeyboardEvent, type: number): boolean {
        //console.log('isCommand', evt.code);
        const code = evt.code

        if (code === 'F12') return true;

        // ESC - выход из всех режимов
        if (code === 'Escape') {
            if (this.inputMode) {
                this.setMode(null, true);

                return skipEvent(evt, true);
            }

            return false;
        }

        // F1 - synthesizer
        if (code === 'F1') {
            if (this.inputMode !== 'sound') {
                if (type === UP) {
                    this.setMode('sound');
                }

                return skipEvent(evt, true);
            }
        }

        // setting for synthesizer
        // if (
        //     (this.inputMode === 'sound' || this.inputMode === 'linePlayer') &&
        //     type === 'up' &&
        //     presetKeys.includes(code)
        // ) {
        //     if (evt.code === 'F5') {
        //         this.synthesizer.setSettings(defaultSynthSettings);
        //     } else if (evt.code === 'F6') {
        //         this.synthesizer.setSettings(drumSettings);
        //     } else if (evt.code === 'F7') {
        //         this.synthesizer.setSettings(leftToRightBrassSection);
        //     }
        //
        //     return skipEvent(evt, true);
        // }

        // F2 - editor
        if (code === 'F2') {
            if (type === UP) {
                this.setMode('text');
            }

            return skipEvent(evt, true);
        }

        // if (evt.code === 'F3') {
        //     if (type === 'up') {
        //         this.setMode('beat');
        //         this.beatRecorder.connect({
        //             beatInput: this.mainEditor,
        //             textInput: this.mainEditor,
        //             multiBuffer: this.outEditor,
        //             playSound: (key: string, onlyStop?: boolean) => this.synthesizer.playSound(key, onlyStop),
        //             multiPlayer: this.multiPlayer,
        //         });
        //         this.currTool = this.beatRecorder;
        //     }
        //
        //     return skipEvent(evt, true);
        // }
    }

    setMode(mode?: InputMode, stopPlayer?: boolean) {
        // this.disconnectCurrTool();

        if (this.inputMode === 'sound' && mode !== 'sound') {
            this.downedKeys = {};
        }

        // if (stopPlayer) {
        //     // player.stop();
        // }

        this.inputMode = mode;
        //this.byId('modeLabel').innerHTML = mode || 'no mode';
    }
}



// абвгдеёжзиёклмнопрстуфхцчшщъыьэюя
// ал ам ан ай
// ба ва га да жа за ка па ра са та фа ха ца ча ша ща
// бе ве ге де же зе ке пе ре се те фе хе це че ше ще
// бо во го до жо зо ко по ро со то фо хо цо чо шо що

// https://github.com/cwilso/PitchDetect/issues/30
// https://github.com/peterkhayes/pitchfinder
// https://github.com/kyunwang/pitch-analyser
